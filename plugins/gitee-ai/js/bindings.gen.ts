// @ts-nocheck

// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/

export const commands = {
  async sendVerificationCode(email: string): Promise<null> {
    return await TAURI_INVOKE("plugin:gitee-ai|send_verification_code", {
      email,
    });
  },
  async verifyCode(email: string, code: string): Promise<string> {
    return await TAURI_INVOKE("plugin:gitee-ai|verify_code", { email, code });
  },
  async getUserInfo(): Promise<GiteeAiUser> {
    return await TAURI_INVOKE("plugin:gitee-ai|get_user_info");
  },
  async pay(
    planIdent: string,
    quantity: number,
    payType: string
  ): Promise<GiteeAiPayDetail> {
    return await TAURI_INVOKE("plugin:gitee-ai|pay", {
      planIdent,
      quantity,
      payType,
    });
  },
  async getPayResult(ident: string): Promise<GiteeAiPayResult> {
    return await TAURI_INVOKE("plugin:gitee-ai|get_pay_result", { ident });
  },
  async getAppInfo(): Promise<GiteeAiAppInfo> {
    return await TAURI_INVOKE("plugin:gitee-ai|get_app_info");
  },
};

/** user-defined events **/

/** user-defined constants **/

/** user-defined types **/

export type GiteeAiAppInfo = {
  appid: string;
  name: string;
  status: GiteeAiAppStatus;
  payment_plans: GiteeAiAppPaymentPlan[];
};
export type GiteeAiAppPaymentPlan = {
  ident: string;
  name: string;
  period: GiteeAiPaymentPeriod;
  period_type: number;
  period_quantity: number;
  calls_limit: number;
  price: number;
  description: string;
};
export type GiteeAiAppStatus =
  | "DRAFT"
  | "UNDER_REVIEW"
  | "PENDING_RELEASE"
  | "PUBLISHED"
  | "REMOVED"
  | "DELETED";
export type GiteeAiLoginStatus = {
  is_logged_in: boolean;
  user_info: GiteeAiUser | null;
  token_info: GiteeAiTokenInfo | null;
};
export type GiteeAiPayDetail = {
  ident: string;
  status: string;
  redirect_type: string;
  url: string;
};
export type GiteeAiPayResult = {
  ident: string;
  amount: number;
  price: number;
  type: string;
  status: string;
};
export type GiteeAiPaymentPeriod = "YEAR" | "MONTH" | "DAY" | "NONE";
export type GiteeAiSubscription = {
  pay_plan_ident: string;
  expired_at: number;
  status: string;
};
export type GiteeAiTokenInfo = {
  token: string;
  user_email: string;
  created_at: number;
  updated_at: number;
};
export type GiteeAiUser = {
  mobile: string;
  email: string;
  status: GiteeAiUserStatus;
  purchase_status: GiteeAiUserPurchaseStatus;
  pay_plan_ident: string;
  created_at: number;
  usage_expired_at: number;
  subscriptions: GiteeAiSubscription[];
};
export type GiteeAiUserPurchaseStatus =
  | "ACTIVE"
  | "EXPIRED"
  | "EXHAUSTED"
  | "NOT_PURCHASED";
export type GiteeAiUserStatus = "NORMAL" | "DISABLED";

/** tauri-specta globals **/

import {
  invoke as TAURI_INVOKE,
  Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
  listen: (
    cb: TAURI_API_EVENT.EventCallback<T>
  ) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
  once: (
    cb: TAURI_API_EVENT.EventCallback<T>
  ) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
  emit: null extends T
    ? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
    : (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
  | { status: "ok"; data: T }
  | { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
  mappings: Record<keyof T, string>
) {
  return new Proxy(
    {} as unknown as {
      [K in keyof T]: __EventObj__<T[K]> & {
        (handle: __WebviewWindow__): __EventObj__<T[K]>;
      };
    },
    {
      get: (_, event) => {
        const name = mappings[event as keyof T];

        return new Proxy((() => {}) as any, {
          apply: (_, __, [window]: [__WebviewWindow__]) => ({
            listen: (arg: any) => window.listen(name, arg),
            once: (arg: any) => window.once(name, arg),
            emit: (arg: any) => window.emit(name, arg),
          }),
          get: (_, command: keyof __EventObj__<any>) => {
            switch (command) {
              case "listen":
                return (arg: any) => TAURI_API_EVENT.listen(name, arg);
              case "once":
                return (arg: any) => TAURI_API_EVENT.once(name, arg);
              case "emit":
                return (arg: any) => TAURI_API_EVENT.emit(name, arg);
            }
          },
        });
      },
    }
  );
}
