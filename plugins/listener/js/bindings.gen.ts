// @ts-nocheck


// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async listMicrophoneDevices() : Promise<string[]> {
    return await TAURI_INVOKE("plugin:listener|list_microphone_devices");
},
async checkMicrophoneAccess() : Promise<boolean> {
    return await TAURI_INVOKE("plugin:listener|check_microphone_access");
},
async checkSystemAudioAccess() : Promise<boolean> {
    return await TAURI_INVOKE("plugin:listener|check_system_audio_access");
},
async requestMicrophoneAccess() : Promise<null> {
    return await TAURI_INVOKE("plugin:listener|request_microphone_access");
},
async requestSystemAudioAccess() : Promise<null> {
    return await TAURI_INVOKE("plugin:listener|request_system_audio_access");
},
async openMicrophoneAccessSettings() : Promise<null> {
    return await TAURI_INVOKE("plugin:listener|open_microphone_access_settings");
},
async openSystemAudioAccessSettings() : Promise<null> {
    return await TAURI_INVOKE("plugin:listener|open_system_audio_access_settings");
},
async getMicMuted() : Promise<boolean> {
    return await TAURI_INVOKE("plugin:listener|get_mic_muted");
},
async setMicMuted(muted: boolean) : Promise<null> {
    return await TAURI_INVOKE("plugin:listener|set_mic_muted", { muted });
},
async getSpeakerMuted() : Promise<boolean> {
    return await TAURI_INVOKE("plugin:listener|get_speaker_muted");
},
async setSpeakerMuted(muted: boolean) : Promise<null> {
    return await TAURI_INVOKE("plugin:listener|set_speaker_muted", { muted });
},
async startSession(sessionId: string) : Promise<null> {
    return await TAURI_INVOKE("plugin:listener|start_session", { sessionId });
},
async stopSession() : Promise<null> {
    return await TAURI_INVOKE("plugin:listener|stop_session");
},
async pauseSession() : Promise<null> {
    return await TAURI_INVOKE("plugin:listener|pause_session");
},
async resumeSession() : Promise<null> {
    return await TAURI_INVOKE("plugin:listener|resume_session");
},
async getState() : Promise<string> {
    return await TAURI_INVOKE("plugin:listener|get_state");
}
}

/** user-defined events **/


export const events = __makeEvents__<{
sessionEvent: SessionEvent
}>({
sessionEvent: "plugin:listener:session-event"
})

/** user-defined constants **/



/** user-defined types **/

export type SessionEvent = { type: "inactive" } | { type: "running_active" } | { type: "running_paused" } | { type: "words"; words: Word[] } | { type: "audioAmplitude"; mic: number; speaker: number }
export type SpeakerIdentity = { type: "unassigned"; value: { index: number } } | { type: "assigned"; value: { id: string; label: string } }
export type Word = { text: string; speaker: SpeakerIdentity | null; confidence: number | null; start_ms: number | null; end_ms: number | null }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
