// @ts-nocheck


// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async windowShow(window: HyprWindow) : Promise<null> {
    return await TAURI_INVOKE("plugin:windows|window_show", { window });
},
async windowHide(window: HyprWindow) : Promise<null> {
    return await TAURI_INVOKE("plugin:windows|window_hide", { window });
},
async windowDestroy(window: HyprWindow) : Promise<null> {
    return await TAURI_INVOKE("plugin:windows|window_destroy", { window });
},
async windowPosition(window: HyprWindow, pos: KnownPosition) : Promise<null> {
    return await TAURI_INVOKE("plugin:windows|window_position", { window, pos });
},
async windowResizeDefault(window: HyprWindow) : Promise<null> {
    return await TAURI_INVOKE("plugin:windows|window_resize_default", { window });
},
async windowGetFloating(window: HyprWindow) : Promise<boolean> {
    return await TAURI_INVOKE("plugin:windows|window_get_floating", { window });
},
async windowSetFloating(window: HyprWindow, v: boolean) : Promise<null> {
    return await TAURI_INVOKE("plugin:windows|window_set_floating", { window, v });
},
async windowNavigate(window: HyprWindow, path: string) : Promise<null> {
    return await TAURI_INVOKE("plugin:windows|window_navigate", { window, path });
},
async windowEmitNavigate(window: HyprWindow, path: string) : Promise<null> {
    return await TAURI_INVOKE("plugin:windows|window_emit_navigate", { window, path });
},
async windowIsVisible(window: HyprWindow) : Promise<boolean> {
    return await TAURI_INVOKE("plugin:windows|window_is_visible", { window });
}
}

/** user-defined events **/


export const events = __makeEvents__<{
mainWindowState: MainWindowState,
navigate: Navigate,
windowDestroyed: WindowDestroyed
}>({
mainWindowState: "plugin:windows:main-window-state",
navigate: "plugin:windows:navigate",
windowDestroyed: "plugin:windows:window-destroyed"
})

/** user-defined constants **/



/** user-defined types **/

export type HyprWindow = { type: "main" } | { type: "note"; value: string } | { type: "human"; value: string } | { type: "organization"; value: string } | { type: "calendar" } | { type: "settings" } | { type: "video"; value: string } | { type: "plans" }
export type KnownPosition = "left-half" | "right-half" | "center"
export type MainWindowState = { left_sidebar_expanded: boolean | null; right_panel_expanded: boolean | null }
export type Navigate = { path: string }
export type WindowDestroyed = { window: HyprWindow }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
